<div class="w-100">
  <form accept-charset="UTF-8" id="regForm" action='loading' class="auto_create p-0" id="auto_create" method="get">
  <%= hidden_field_tag :authenticity_token, form_authenticity_token %>

    <div class="tab"><h4 class="text-white">Where are you going?</h4>
      <input type="search" class="form-control" id="input-0" style="outline: none;" name="destination" placeholder="> Answer here ...">
    </div>

    <div class="tab">
      <div class="d-flex justify-content-center justify-content-md-start" id="cal">
        <p><input  id="range_start" type="date" class="invisible datepicker" placeholder="Dates" name="start_date" style="opacity: 0.75"></p>
        <p><input  id="range_end" type="date" class="datepicker" placeholder="End" name="end_date" style="opacity: 0.75" oninput="this.className = ''"></p>
      </div>
    </div>

    <div class="tab"><h4 class="text-white">Contact Info:</h4>
      <div class="form-group" >
        <select class="form-control" name="gender" style="opacity: 0.75" >
          <option>Male</option>
          <option>Female</option>
          <option>Other</option>
        </select>
      </div>
      <div class="form-group">
        <select class="form-control w-100" name="purpose" style="opacity: 0.75">
          <option>Business</option>
          <option>Vacations</option>
        </select>
      </div>
    </div>

    <div class="tab"><h4 class="text-white">From where are you travelling?</h4>
      <input type="search" class="form-control" style="outline: none;" id="input-00" name="origin" placeholder="From where are you traveling?">
    </div>

    <div class="tab"><h4 class="text-white">How old are you?</h4>
      <input type="number" class="form-control" placeholder="Age" name="age">
    </div>


    <div style="overflow:auto;">
      <div style="float:right;">
        <button type="button" id="prevBtn" onclick="nextPrev(-1)" class="btn next-btn">Previous</button>
        <button type="button" id="nextBtn" onclick="nextPrev(1)" class="btn next-btn"></button>
      </div>
    </div>

    <div style="text-align:center;margin-top:40px;">
      <span class="step"></span>
      <span class="step"></span>
      <span class="step"></span>
      <span class="step"></span>
      <span class="step"></span>
    </div>
  </form>
</div>


<style>


  #cal {

  }
  .algolia-places:focus {
  outline: none !important;
}

  .next-btn {
    background-color: #7b83f6;
    color: white;
    opacity: 1;
    padding: 7px 25px;
    margin-top: 20px;

  }

  .next-btn:hover{
    background-color: #5e69ff !important;
    color: white;
  }

  #range_end {
    display: none;
  }

  /* Style the form */
  #regForm {
    /*background-color: #ffffff;*/
    margin: 20px auto;
    padding: 40px;
    width: 100%;
    min-width: 300px;
  }
  .margin{
    margin-top: -60px;
  }
  /* Style the input fields */
  input {
    background-color: rgba(255, 255, 255, 0) !important;
    border: 0px !important;
    border-bottom: 1px solid white !important;
    color: white !important;
    padding: 0px !important;
    width: 100%;
    font-size: 17px;
    border: 1px solid #aaaaaa;
    box-shadow: none !important;
  }

  input::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */
  color: white !important;
  opacity: 0.6 !important;
}

  /* Mark input boxes that gets an error on validation: */
  input.invalid {
    background-color: #ffdddd;
  }

  /* Hide all steps by default: */
  .tab {
    display: none;
  }

  /* Make circles that indicate the steps of the form: */
  .step {
    height: 15px;
    width: 15px;
    margin: 0 2px;
    background-color: white;
    border: none;
    border-radius: 50%;
    display: inline-block;
    opacity: 0.2;
  }

  /* Mark the actives step: */
  .step.actives {
    opacity: 1;
  }

  /* Mark the steps that are finished and valid: */
  .step.finish {
    background-color: white;
    opacity: 0.7;
  }

  .form-control{

  }


</style>


<script>
  var currentTab = 0; // Current tab is set to be the first tab (0)
showTab(currentTab); // Display the current tab

function showTab(n) {
  // This function will display the specified tab of the form ...
  var x = document.getElementsByClassName("tab");
  x[n].style.display = "block";
  // ... and fix the Previous/Next buttons:
  if (n == 0) {
    document.getElementById("prevBtn").style.display = "none";
  } else {
    document.getElementById("prevBtn").style.display = "inline";
  }
  if (n == (x.length - 1)) {
    document.getElementById("nextBtn").innerHTML = "Submit";
  } else {
    document.getElementById("nextBtn").innerHTML = "Next";
  }
  // ... and run a function that displays the correct step indicator:
  fixStepIndicator(n)
}

function nextPrev(n) {
  // This function will figure out which tab to display
  var x = document.getElementsByClassName("tab");
  // Exit the function if any field in the current tab is invalid:
  if (n == 1 && !validateForm()) return false;
  // Hide the current tab:
  x[currentTab].style.display = "none";
  // Increase or decrease the current tab by 1:
  currentTab = currentTab + n;
  // if you have reached the end of the form... :
  if (currentTab >= x.length) {
    //...the form gets submitted:
    document.getElementById("regForm").submit();
    return false;
  }
  // Otherwise, display the correct tab:
  showTab(currentTab);
}

function validateForm() {
  // This function deals with validation of the form fields
  var x, y, i, valid = true;
  x = document.getElementsByClassName("tab");
  y = x[currentTab].getElementsByTagName("input");
  // A loop that checks every input field in the current tab:
  for (i = 0; i < y.length; i++) {
    // If a field is empty...
    if (y[i].value == "") {
      // add an "invalid" class to the field:
      y[i].className += " invalid";
      // and set the current valid status to false:
      valid = false;
    }
  }
  // If the valid status is true, mark the step as finished and valid:
  if (valid) {
    document.getElementsByClassName("step")[currentTab].className += " finish";
  }
  return valid; // return the valid status
}

function fixStepIndicator(n) {
  // This function removes the "actives" class of all steps...
  var i, x = document.getElementsByClassName("step");
  for (i = 0; i < x.length; i++) {
    x[i].className = x[i].className.replace(" actives", "");
  }
  //... and adds the "actives" class to the current step:
  x[n].className += " actives";
}



</script>


<script>
  (function() {
    var placesAutocomplete = places({
      appId: 'plDZQY8F8SRD',
      apiKey: 'ed238104cbd48ccfdfbd3c9f2ae81ae8',
      container: document.querySelector('#address')
    });

    var $address = document.querySelector('#address-value')
    placesAutocomplete.on('change', function(e) {
      $address.textContent = e.suggestion.value
    });

    placesAutocomplete.on('clear', function() {
      $address.textContent = 'none';
    });

  })();
</script>
